-- MySQL Script generated by MySQL Workbench
-- jue 23 feb 2023 21:51:58
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema college_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema college_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `college_db` DEFAULT CHARACTER SET utf8 ;
USE `college_db` ;

-- -----------------------------------------------------
-- Table `college_db`.`User_dimension`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `college_db`.`User_dimension` (
  `us_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `us_pass` CHAR(140) NOT NULL,
  `us_fname` VARCHAR(100) NOT NULL,
  `us_lname` VARCHAR(100) NOT NULL,
  `us_bday` DATE NOT NULL,
  `us_doc` INT NOT NULL,
  `us_doc_type` ENUM('CC', 'TI', 'RC', 'CC DIG', 'NIP', 'CE') NOT NULL,
  `us_username` VARCHAR(25) NOT NULL,
  `us_role` VARCHAR(30) NOT NULL,
  `us_program_code` INT UNSIGNED NOT NULL,
  `us_program_name` VARCHAR(100) NOT NULL,
  `us_faculty_code` INT UNSIGNED NOT NULL,
  `us_faculty_name` VARCHAR(60) NOT NULL,
  `us_created_at` DATE NOT NULL,
  `us_active` BINARY(1) NOT NULL,
  PRIMARY KEY (`us_id`),
  UNIQUE INDEX `us_ti_UNIQUE` (`us_doc` ASC) VISIBLE,
  UNIQUE INDEX `us_username_UNIQUE` (`us_username` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `college_db`.`Subject_dimension`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `college_db`.`Subject_dimension` (
  `sb_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `sb_name` VARCHAR(150) NOT NULL,
  `sb_credits` INT NOT NULL,
  `sb_type` ENUM('E', 'O', 'P', 'B', 'C', 'T') NOT NULL,
  `sb_program_code` INT UNSIGNED NOT NULL,
  `sb_program_name` VARCHAR(100) NOT NULL,
  `sb_faculty_code` INT UNSIGNED NOT NULL,
  `sb_faculty_name` VARCHAR(60) NOT NULL,
  `sb_created_at` DATE NOT NULL,
  `sb_active` BINARY(1) NOT NULL,
  PRIMARY KEY (`sb_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `college_db`.`Classroom_dimension`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `college_db`.`Classroom_dimension` (
  `cr_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `cr_number` SMALLINT UNSIGNED NOT NULL,
  `cr_has_pcs` TINYINT UNSIGNED NOT NULL DEFAULT 0,
  `cr_capacity` TINYINT UNSIGNED NOT NULL,
  `cr_building_number` SMALLINT UNSIGNED NOT NULL,
  `cr_building_name` VARCHAR(100) NOT NULL,
  `cr_campus_code` SMALLINT UNSIGNED NOT NULL,
  `cr_campus_name` VARCHAR(60) NOT NULL,
  `cr_faculty_code` SMALLINT NOT NULL,
  `cr_faculty_name` VARCHAR(60) NOT NULL,
  `cr_building_latitude` DECIMAL(10,8) NULL,
  `cr_building_longitude` DECIMAL(11,8) NULL,
  `cr_name` VARCHAR(80) NULL,
  PRIMARY KEY (`cr_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = big5;


-- -----------------------------------------------------
-- Table `college_db`.`Date_dimension`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `college_db`.`Date_dimension` (
  `dt_id` INT UNSIGNED NOT NULL,
  `dt_full` DATE NOT NULL,
  `dt_semester` TINYINT UNSIGNED NOT NULL,
  `dt_year` YEAR NOT NULL,
  PRIMARY KEY (`dt_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `college_db`.`Enrolled_in_fact`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `college_db`.`Enrolled_in_fact` (
  `en_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `en_us_id` INT UNSIGNED NOT NULL,
  `en_sb_id` INT UNSIGNED NOT NULL,
  `en_cr_id` INT UNSIGNED NOT NULL,
  `en_dt_id` INT UNSIGNED NOT NULL,
  `en_teacher` INT UNSIGNED NOT NULL,
  `en_shour` TIME NOT NULL,
  `en_fhour` TIME NOT NULL,
  `en_days` BINARY(6) NOT NULL,
  PRIMARY KEY (`en_id`, `en_us_id`, `en_sb_id`, `en_cr_id`, `en_dt_id`, `en_teacher`),
  INDEX `fk_Enrolled_in_Subject1_idx` (`en_sb_id` ASC) VISIBLE,
  INDEX `fk_Enrolled_in_Classroom1_idx` (`en_cr_id` ASC) VISIBLE,
  INDEX `fk_Enrolled_in_User1_idx` (`en_us_id` ASC) VISIBLE,
  INDEX `fk_Enrolled_in_User2_idx` (`en_teacher` ASC) VISIBLE,
  INDEX `fk_Enrolled_in_Date1_idx` (`en_dt_id` ASC) VISIBLE,
  CONSTRAINT `fk_subject`
    FOREIGN KEY (`en_sb_id`)
    REFERENCES `college_db`.`Subject_dimension` (`sb_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_classroom`
    FOREIGN KEY (`en_cr_id`)
    REFERENCES `college_db`.`Classroom_dimension` (`cr_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user`
    FOREIGN KEY (`en_us_id`)
    REFERENCES `college_db`.`User_dimension` (`us_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_teacher`
    FOREIGN KEY (`en_teacher`)
    REFERENCES `college_db`.`User_dimension` (`us_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Enrolled_in_Date1`
    FOREIGN KEY (`en_dt_id`)
    REFERENCES `college_db`.`Date_dimension` (`dt_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `college_db`.`Grades_fact`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `college_db`.`Grades_fact` (
  `gr_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `gr_score` DECIMAL UNSIGNED NOT NULL,
  `gr_sb_id` INT UNSIGNED NOT NULL,
  `gr_dt_id` INT UNSIGNED NOT NULL,
  `gr_us_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`gr_id`, `gr_sb_id`, `gr_dt_id`, `gr_us_id`),
  INDEX `fk_Grades_fact_Subject_dimension1_idx` (`gr_sb_id` ASC) VISIBLE,
  INDEX `fk_Grades_fact_Date_dimension1_idx` (`gr_dt_id` ASC) VISIBLE,
  INDEX `fk_Grades_fact_User_dimension1_idx` (`gr_us_id` ASC) VISIBLE,
  CONSTRAINT `fk_Grades_fact_Subject_dimension1`
    FOREIGN KEY (`gr_sb_id`)
    REFERENCES `college_db`.`Subject_dimension` (`sb_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Grades_fact_Date_dimension1`
    FOREIGN KEY (`gr_dt_id`)
    REFERENCES `college_db`.`Date_dimension` (`dt_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Grades_fact_User_dimension1`
    FOREIGN KEY (`gr_us_id`)
    REFERENCES `college_db`.`User_dimension` (`us_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `college_db` ;

-- -----------------------------------------------------
-- procedure insert_user
-- -----------------------------------------------------

DELIMITER $$
USE `college_db`$$
CREATE PROCEDURE `insert_user` (IN program SMALLINT, IN pass varchar(100), IN fname Varchar(100), IN lname Varchar(100), IN bday DATE, IN doc INT, IN doctype ENUM('CC', 'TI', 'RC', 'CC DIG', 'NIP', 'CE'), IN username varchar(25), IN role varchar(30))
BEGIN
    DECLARE pg_code INT;
    DECLARE salt char(12);
    
    SELECT pg_id INTO pg_code FROM Program_dimension WHERE program=pg_code;
    SELECT SUBSTR(MD5(RAND()),1,12) INTO salt;
    
    IF NOT ISNULL(pg_code) THEN
		INSERT INTO User_dimension (us_pg_id, us_pass, us_fname, us_lname, us_bday, us_doc, us_doc_type, us_username, us_role) 
        Value(pg_code, salt + HASHBYTES('SHA2_256', pass + salt) , fname, lname, bday, doc, doctype, username, role);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure check_user
-- -----------------------------------------------------

DELIMITER $$
USE `college_db`$$
CREATE PROCEDURE `check_user` (IN id INT, IN pass varchar(100), OUT correct boolean)
BEGIN
	DECLARE salt char(12);
    DECLARE hash char(64);
    
    SELECT SUBSTR(us_pass, 1, 12), SUBSTR(us_pass, 13) INTO salt, hash FROM User_dimension WHERE us_id=id;
    
    IF HASHBYTES('SHA2_256', pass + Salt) = hash THEN 
		SELECT 1 INTO correct;
    ELSE 
		SELECT 0 INTO correct;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_user_pass
-- -----------------------------------------------------

DELIMITER $$
USE `college_db`$$
CREATE PROCEDURE `update_user_pass` (IN id INT, IN new_pass VARCHAR(100))
BEGIN
	DECLARE salt char(12);
    
    SELECT SUBSTR(us_pass, 1, 12) INTO salt FROM User_dimension WHERE us_id=id;
    
    UPDATE user_dimension 
    SET us_pass = salt + HASHBYTES('SHA2_256', new_pass + salt)
    WHERE us_id = id;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
